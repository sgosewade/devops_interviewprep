What is Python? What are the benefits of using Python?
Python is an open-source, high-level, dynamically-typed, portable, expressive, easy to learn, and code programming language. 
The very fact that Python is available open-source is the reason for the existence of large community support for the programming language. 
Third-Party Modules
Presence of Libraries
Open Source and free
Huge Support Community
Easy to learn
User-Friendly data structures
Speed



What is PEP 8?
PEP 8,PEP8 or PEP-8, is a document that provides guidelines and best practices on how to write Python code.
The primary focus of PEP 8 is to improve the readability and consistency of Python code. 
PEP stands for Python Enhancement Proposal, and there are several of them.

What are the differences between Python 2.x and Python 3.x?
print function
Division operator
Unicode
xrange
Error Handling
__future__ module:

This is basically not a difference between the two versions, but a useful thing to mention here. The idea of the __future__ module is to help migrate to Python 3.x. 
If we are planning to have Python 3.x support in our 2.x code, we can use _future_ imports in our code. 
For example, in the Python 2.x code below, we use Python 3.x’s integer division behavior using the __future__ module. 
 
# In below python 2.x code, division works
# same as Python 3.x because we use  __future__
 
from __future__ import division 
print 7 / 5 
print -7 / 5


Basis of comparison									Python 3																			Python 2
Function print										print ("hello")													print "hello"
Division of Integers			Whenever two integers are divided, you get a float value							When two integers are divided, you always provide integer value.
Unicode							In Python 3, default storing of strings is Unicode.									To store Unicode string value, you require to define them with "u".
Syntax							The syntax is simpler and easily understandable.									The syntax of Python 2 was comparatively difficult to understand.
Iteration(xrange)				The new Range() function introduced to perform iterations.							In Python 2, the xrange() is used for iterations.
Rules of ordering Comparisons	In this version, Rules of ordering comparisons have been simplified.				Rules of ordering comparison are very complex.
Exceptions						It should be enclosed in parenthesis.												It should be enclosed in notations.
Leak of variables				The value of variables never changes.												The value of the global variable will change while using it inside for-loop.
Backward compatibility			Not difficult to port python 2 to python 3 but it is never reliable.				Python version 3 is not backwardly compatible with Python 2.
Library							Many recent developers are creating libraries which you can only use with Python 3.	Many older libraries created for Python 2 is not forward-compatible.


How to get current directory using Python?
To find the current working directory in Python, use os. getcwd() , and to change the current working directory, use os. chdir(path) .
# importing os module  
import os  
      
# Get the current working  
# directory (CWD)  
cwd = os.getcwd()  
      
# Print the current working   
# directory (CWD)  
print("Current working directory:")
print(cwd)  

Why do you need to make your code more readable?
How many Keywords are there in Python? And why should we know them?
What are the built-in data-types in Python?
Boolean Operations — and, or, not 
Comparisons
Numeric Types — int, float, complex
Iterator Types
Sequence Types — list, tuple, range


How many types of operators Python has? Give brief idea about them
Types of Operator
Python language supports the following types of operators.
Arithmetic Operators
Comparison (Relational) Operators
Assignment Operators
Logical Operators
Bitwise Operators
Membership Operators
Identity Operators

Why Should We Use File Operation?
Files are used to store data in a storage device permanently. 
File handling provides a mechanism to store the output of a program in a file and to perform various operations on it.
A stream is an abstraction that represents a device on which operations of input and output are performed.
It is required to work with files for either writing to a file or read data from it.
Also, if you are not already aware, I/O operations are the costliest operations where a program can stumble.

Why should we close files?
The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done. 
Python automatically closes a file when the reference object of a file is reassigned to another file.

What are python dictionaries?
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and does not allow duplicates.
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

What are the differences between del keyword and clear() function?
In Python dictionary, del keyword is used to delete a particular element. del list[index]  or del list
The clear( ) function is used to delete all the elements in a dictionary. list.clear()
remove():
remove() is an inbuilt function in Python programming language that removes a given object from the list. It removes the object from the list. It does not return any value.
 eg:list.remove(index)
pop() method: The pop() method removes the item at the given index from the list and returns  the removed item.
list.pop(index)


What is Python Set?
A Set is an unordered collection data type that is iterable, mutable and has no duplicate elements. 
Since sets are unordered, we cannot access items using indexes like we do in lists.

# Same as {"a", "b", "c"}
myset = set(["a", "b", "c"])
print(myset)
# Adding element to the set
myset.add("d")
print(myset)

What is namespace in Python?
A namespace is a collection of currently defined symbolic names along with information about the object that each name references.
You can think of a namespace as a dictionary in which the keys are the object names and the values are the objects themselves.


What is the statement that can be used in Python if the program requires no action but requires a statement syntactically?
What are the advantages of Python Recursion?
What are the disadvantages of Python Recursion?
What is lambda in python?
Why don’t Python lambda have any statement?
What do you understand by Python Modules?
A module print_number given, what will be the output of the following code?
What do you understand by Python Package?
Why do we need Python Directories


Write a python program to replace delimeter as ':' with space and display output on console.==> use replace method of strings
str2 = str.replace(":"," ")


# 1) Python Program to print duplicates from a list of integers?


list1 = [1,2,3,4,5,6,7,8,9,1,2,3,4,5]
dupNum = []
sameNum = []

for x in list1:
	if x not in sameNum:
		sameNum[x] = 1
	else:
		if sameNum[x] == 1
			dupNum.append(x)
		sameNum[x] += 1

print(dupNum)

#2) Reverse words in a given String in Python ( i/p : Hyderabad is the capital of Telangana o/p : Telangana of capital the is Hyderabad)

str = "Hyderabad is the capital of Telangana"
temp = str.split()
temp = list(reversed(temp))

print(" ".join(temp))

#3) Write a Python program to get only ".txt" files in directory? ( ex: Create one folder and create .txt files for input)

import global
import os

os.chdir(r'C:\Users\HP\Documents\Python')
txtFiles = glob.glob('*.txt')
print(txtFiles)


#4) Write a Program to print the number of lines,words and characters present in the given file?

file = open("temp.txt","r")

no_of_lines = 0
no_of_words = 0
no_of_chars = 0

for line in file:
	line = line.strip("\n")
	words = line.split()
	no_of_lines += 1
	no_of_words += len(words)
	no_of_chars += len(lines)
	
file.close()

print("lines:",no_of_lines,"words:",no_of_words,"characters:",no_of_chars)

#5) Given an array arr[] of n elements, write a function to search a given element x in arr[]. (Input : arr[] = {​​​​​10, 20, 40, 60, 50, 110, 100, 130, 170}​​​​​x = 50;


arr[] = {​​​​​10, 20, 40, 60, 50, 110, 100, 130, 170}

x=50

for i in range(len(arr)):
	if arr[i] == x
		print ("X=",x "is found at position:",i)
		return 1
return -1

'''6) Write a python program to replace delimeter as ':' with space and display output on console.
 Example : Input = 'Moschip:Technologies:is:hiring'
Output = 'Moschip Technologies is hiring'
'''

str = "Moschip:Technologies:is:hiring"
tempList = list(str)
delim = ':'

repStr = []

for ele in tempList:
	repStr.append(ele.replace((" "), delim))

print ("Updated list: "+ str(repStr))


'''7)python files exist program

You have the os.path.exists function:

import os.path
os.path.exists(file_path)
This returns True for both files and directories 
os.path.exists(path) - Returns true if the path is a file, directory, or a valid symlink.
os.path.isfile(path) - Returns true if the path is a regular file or a symlink to a file.
os.path.isdir(path) - Returns true if the path is a directory or a symlink to a directory.
The following if statement checks whether the file filename.txt exist:

import os.path

if os.path.isfile('filename.txt') || os.path.exists(file_path):
    print ("File exist")
else:
    print ("File not exist")

'''8)python sorting without using library func
my_list = [-15, -26, 15, 1, 23, -64, 23, 76]
new_list = []

while my_list:
    min = my_list[0]  
    for x in my_list: 
        if x < min:
            min = x
    new_list.append(min)
    my_list.remove(min)    

print(new_list)

'''9)How do you remove a given character from String? 
Using str.replace()
s="Hello$ Python3$"
s1=s.replace("$","")
print (s1)

Using ‘filter()’
s="Hello$@ Python3&"
f=filter(str.isalpha,s)
s1="".join(f)
print (s1)

'''How do you reverse a string in Python?
Slicing ===>>>stringname[::-1]
Loop:

str = "Python" # initial string
reversedString=[]
index = len(str) # calculate length of string and save in index
while index > 0: 
    reversedString += str[ index - 1 ] # save the value of str[index-1] in reverseString
    index = index - 1 # decrement index
print(reversedString) # reversed string

Using Reversed and join:
str = 'Python' #initial string
reversed=''.join(reversed(str)) # .join() method merges all of the characters resulting from the reversed iteration into a new string
print(reversed) #print the reversed string

https://linuxhint.com/python_string_methods/





	
	
Program1.py
Displaying Program1.py.